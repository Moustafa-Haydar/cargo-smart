version: '3.8'

services:

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-cargo_db}?schema=public
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=cargo_db
    ports:
      - "5433:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cargo_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network

  # n8n:
  #   image: n8nio/n8n:latest
  #   ports:
  #     - "5678:5678"
  #   environment:
  #     - N8N_HOST=${N8N_HOST:-localhost}
  #     - N8N_PORT=5678
  #     - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
  #     - NODE_ENV=production
  #     - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-http://localhost:5678}
  #     - DB_TYPE=mongodb
  #     - DB_MONGODB_CONNECTION_URL=mongodb://mongodb:27017/n8n
  #   volumes:
  #     - n8n_data:/home/node/.n8n
  #   networks:
  #     - app-network
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
  #     interval: 30s
  #     timeout: 3s
  #     retries: 3

volumes:
  pg_data:
    driver: local
  # n8n_data:
  #   driver: local
  # mongodb_data:
  #   driver: local

networks:
  app-network:
    driver: bridge