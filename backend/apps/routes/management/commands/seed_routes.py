import random, uuid, json
from django.core.management.base import BaseCommand
from apps.geo.models import Location
from apps.routes.models import Route, RouteSegment


class Command(BaseCommand):
    help = "Seed truck routes with realistic route data from actual logistics records."

    def add_arguments(self, parser):
        parser.add_argument("--fresh", action="store_true")

    def handle(self, *args, **opts):
        if opts["fresh"]:
            RouteSegment.objects.all().delete()
            Route.objects.all().delete()
            self.stdout.write(self.style.WARNING("Cleared routes."))

        # No longer using ORS API - only realistic route data

        locations = list(Location.objects.all())
        if len(locations) < 2:
            self.stdout.write(self.style.ERROR("Seed geo first."))
            return

        # Realistic route polylines from actual data
        realistic_routes = [
            {
                "name": "Gurgaon Hub → Gurgaon Hub",
                "polyline": [(28.354, 76.939), (28.354315, 76.938596), (28.354354, 76.938383), (28.354242, 76.938143), (28.354024, 76.937867), (28.353702, 76.93781), (28.353102, 76.937929), (28.352211, 76.937883), (28.353249, 76.937495), (28.354174, 76.937446), (28.354754, 76.937523), (28.355196, 76.937806), (28.358946, 76.93917), (28.361715, 76.938895), (28.366289, 76.933883), (28.372065, 76.930751), (28.372174, 76.92054), (28.372143, 76.919905), (28.371953, 76.919709), (28.371942, 76.919366), (28.372059, 76.919195), (28.372279, 76.919112), (28.372529, 76.91923), (28.372726, 76.919417), (28.375525, 76.919496), (28.379595, 76.914141), (28.379723, 76.904759), (28.380601, 76.893418), (28.389716, 76.893429), (28.389961, 76.893366), (28.391308, 76.892723), (28.393366, 76.892696), (28.397124, 76.892621), (28.402043, 76.892478), (28.404189, 76.889428), (28.405907, 76.883857), (28.404519, 76.881811), (28.40383, 76.880142), (28.401113, 76.875549), (28.399071, 76.872764), (28.397432, 76.870782), (28.395836, 76.868521), (28.395473, 76.86787), (28.394731, 76.866594), (28.393939, 76.865136), (28.391853, 76.860891), (28.390042, 76.857442), (28.388776, 76.854306), (28.387553, 76.851448), (28.385267, 76.848317), (28.384063, 76.846615), (28.382267, 76.843089), (28.381024, 76.84018), (28.379877, 76.8373), (28.378517, 76.834367), (28.376748, 76.831525), (28.375919, 76.8303), (28.375368, 76.831845), (28.375006, 76.831807), (28.375, 76.832)]
            },
            {
                "name": "Pune → Kanchipuram",
                "polyline": [(18.750621, 73.87719), (18.695416, 73.972981), (18.595297, 74.030225), (18.522928, 74.042497), (18.4588, 74.350488), (18.381322, 74.586702), (18.220251, 74.871673), (18.088279, 75.075816), (17.965312, 75.257547), (17.680648, 75.326947), (17.515144, 75.448155), (17.318763, 75.568216), (17.139905, 75.593699), (17.029242, 75.644033), (16.900206, 75.728432), (16.704464, 75.776558), (16.311623, 75.918523), (15.969906, 76.119796), (15.638121, 76.220239), (15.376486, 76.313755), (15.250204, 76.367524), (15.243382, 76.524042), (15.194812, 76.678661), (15.179527, 76.820389), (15.143545, 76.934234), (15.091263, 77.154079), (14.896842, 77.273939), (14.831074, 77.336399), (14.72927, 77.459334), (14.680862, 77.611332), (14.552914, 77.729612), (14.456781, 77.881682), (14.346244, 78.000973), (14.213052, 78.105884), (14.110142, 78.164626), (13.978035, 78.179403), (13.869782, 78.222444), (13.743835, 78.330418), (13.671036, 78.43278), (13.588022, 78.496667), (13.477018, 78.540852), (13.337475, 78.610638), (13.271508, 78.719359), (13.194468, 78.80694), (13.198596, 78.974176), (13.138809, 79.112852), (13.022559, 79.216498), (12.920345, 79.380234), (12.880339, 79.60465), (12.899499, 79.808897), (12.939021, 79.935432), (12.930429, 79.931163)]
            },
            {
                "name": "Pondicherry → Chennai",
                "polyline": [(11.872, 79.632), (11.888676, 79.629779), (11.894581, 79.632591), (11.905104, 79.63344), (11.918549, 79.633201), (11.939437, 79.631087), (11.953755, 79.633196), (11.968687, 79.636124), (11.974394, 79.645524), (11.989664, 79.647207), (12.004554, 79.651329), (12.022595, 79.653493), (12.035455, 79.656404), (12.051955, 79.6568), (12.069224, 79.657368), (12.113426, 79.624947), (12.135869, 79.622308), (12.187488, 79.625235), (12.221093, 79.645741), (12.239039, 79.662178), (12.254611, 79.674515), (12.278716, 79.701712), (12.305937, 79.74744), (12.325844, 79.774132), (12.353178, 79.779111), (12.395395, 79.805928), (12.43054, 79.831723), (12.465099, 79.849409), (12.494319, 79.870538), (12.522004, 79.895397), (12.554954, 79.908276), (12.593782, 79.919184), (12.637396, 79.934644), (12.658287, 79.944244), (12.661997, 79.96105), (12.687571, 79.959729), (12.702321, 79.970171), (12.726969, 79.982456), (12.746116, 79.994617), (12.807365, 80.028086), (12.843976, 80.059689), (12.877751, 80.079533), (12.909495, 80.099105), (12.938645, 80.099961), (12.952748, 80.117503), (12.980011, 80.120551), (13.016768, 80.132025), (13.05099, 80.150428), (13.083998, 80.161482), (13.098493, 80.161831), (13.098108, 80.17631), (13.10197, 80.193512), (13.101756, 80.193892), (13.102, 80.194)]
            },
            # New routes from additional records
            {
                "name": "Mookandapalli → Athipattu",
                "polyline": [(12.746894, 77.806168), (12.73541, 77.829199), (12.758338, 77.836595), (12.795858, 77.856353), (12.825186, 77.863261), (12.868505, 77.87996), (12.926261, 77.907281), (12.991969, 77.934333), (13.036749, 78.004378), (13.01642, 78.217747), (12.99712, 78.295864), (13.005392, 78.343156), (13.007985, 78.380901), (13.013056, 78.411291), (13.006536, 78.459167), (12.97867, 78.508398), (12.951907, 78.560861), (12.950078, 78.592435), (12.941778, 78.616405), (12.932182, 78.636804), (12.929955, 78.654391), (12.930699, 78.66696), (12.932932, 78.679124), (12.936443, 78.713797), (12.940724, 78.76489), (12.945239, 78.837448), (12.948608, 78.877625), (12.954901, 78.984041), (12.962784, 79.020185), (12.972856, 79.068459), (12.974618, 79.129857), (12.968092, 79.15618), (12.968485, 79.208034), (12.994285, 79.243076), (12.947188, 79.319813), (12.928285, 79.345151), (12.910748, 79.401854), (12.897295, 79.495675), (12.895101, 79.581396), (12.874226, 79.619216), (12.874321, 79.674146), (12.876741, 79.771435), (12.907524, 79.832025), (12.921609, 79.882644), (12.954706, 79.934456), (12.975735, 79.957907), (13.015907, 80.005126), (13.045594, 80.069895), (13.057362, 80.101086), (13.06299, 80.152098), (13.085649, 80.160949), (13.092058, 80.156813)]
            },
            {
                "name": "Jagadambigainagar → Shive",
                "polyline": [(13.087428, 80.184717), (13.126349, 80.120997), (13.125342, 80.001322), (13.142956, 79.89162), (13.202118, 79.772295), (13.25854, 79.582352), (13.44149, 79.560314), (13.597211, 79.511975), (13.705531, 79.487917), (13.882647, 79.37998), (14.026842, 79.329317), (14.126085, 79.206401), (14.254427, 79.115222), (14.382796, 79.028847), (14.434954, 78.902274), (14.52681, 78.769267), (14.617233, 78.573404), (14.687772, 78.37765), (14.755908, 78.212424), (14.853533, 78.091417), (14.950426, 77.975403), (15.04016, 77.830418), (15.116019, 77.679444), (15.155876, 77.502132), (15.137891, 77.323724), (15.138316, 77.101722), (15.141167, 76.916652), (15.195911, 76.774649), (15.216416, 76.637044), (15.240184, 76.481869), (15.264886, 76.347847), (15.395783, 76.306967), (15.742435, 76.195869), (16.026307, 76.076933), (16.358803, 75.937863), (16.691794, 75.786075), (16.889022, 75.71533), (17.029877, 75.643861), (17.139905, 75.593699), (17.311875, 75.570845), (17.515033, 75.459502), (17.67689, 75.332577), (17.936316, 75.271247), (18.064513, 75.108113), (18.166825, 74.958193), (18.360123, 74.625646), (18.448032, 74.406321), (18.516649, 74.045149), (18.586491, 74.030359), (18.675159, 73.979059), (18.73463, 73.922442), (18.750621, 73.87719)]
            },
            {
                "name": "Pozhal → Mookandapalli",
                "polyline": [(13.165101, 80.204244), (13.144584, 80.198507), (13.060297, 80.161708), (13.054501, 80.123073), (13.047383, 80.081027), (13.021765, 80.016081), (12.977211, 79.960368), (12.948923, 79.926444), (12.918379, 79.866035), (12.89118, 79.795026), (12.873163, 79.699713), (12.87421, 79.621107), (12.898, 79.561405), (12.900561, 79.441248), (12.922071, 79.37679), (12.932232, 79.33501), (12.949448, 79.318098), (12.980193, 79.276792), (12.977234, 79.232863), (12.967995, 79.177214), (12.966954, 79.137232), (12.975719, 79.096026), (12.968013, 79.060526), (12.958655, 79.00629), (12.955002, 78.94851), (12.949505, 78.879218), (12.944589, 78.84396), (12.945878, 78.788918), (12.942528, 78.725884), (12.935132, 78.688649), (12.930991, 78.666109), (12.930124, 78.648663), (12.938899, 78.622141), (12.950194, 78.591577), (12.959454, 78.535618), (13.002184, 78.482904), (13.010586, 78.432481), (13.011025, 78.385619), (13.00551, 78.344487), (13.001003, 78.308756), (13.002039, 78.255631), (13.037242, 78.093119), (13.042079, 77.992133), (12.984549, 77.929307), (12.92058, 77.906053), (12.868595, 77.880069), (12.833321, 77.867498), (12.805767, 77.858195), (12.777592, 77.847897), (12.745501, 77.833822), (12.747242, 77.810896), (12.746894, 77.806168)]
            },
            {
                "name": "Shive → Guruvoyal",
                "polyline": [(18.750621, 73.87719), (18.702091, 73.972103), (18.605125, 74.028262), (18.529315, 74.034241), (18.477197, 74.264677), (18.394832, 74.531882), (18.237318, 74.765348), (18.102221, 75.009906), (18.037064, 75.199217), (17.8198, 75.30181), (17.636511, 75.367971), (17.436906, 75.510867), (17.25471, 75.593901), (17.096733, 75.608936), (16.982652, 75.657597), (16.877048, 75.721558), (16.683063, 75.792002), (16.300456, 75.916377), (15.97034, 76.118986), (15.667063, 76.213606), (15.40531, 76.306143), (15.263366, 76.34882), (15.240161, 76.481173), (15.217187, 76.634138), (15.191667, 76.761936), (15.145432, 76.905097), (15.142584, 77.069592), (15.12216, 77.28732), (15.159086, 77.439878), (15.110269, 77.639413), (15.062409, 77.808911), (14.969225, 77.934649), (14.877372, 78.054814), (14.774042, 78.172925), (14.713896, 78.326214), (14.642505, 78.511397), (14.576497, 78.681596), (14.476388, 78.857769), (14.415957, 78.950757), (14.333374, 79.062896), (14.185124, 79.175725), (14.082797, 79.239931), (13.984436, 79.337947), (13.803177, 79.411571), (13.650571, 79.51091), (13.540695, 79.540666), (13.405647, 79.632861), (13.379081, 79.802779), (13.336085, 79.90851), (13.282971, 80.074093), (13.203148, 80.128662), (13.202214, 80.131693)]
            },
            {
                "name": "Shive → Onnalvadi",
                "polyline": [(18.750621, 73.87719), (18.718494, 73.96296), (18.669041, 73.994063), (18.590736, 74.032331), (18.532886, 74.034111), (18.487349, 74.137471), (18.450656, 74.39907), (18.389822, 74.561227), (18.257839, 74.759709), (18.184438, 74.939745), (18.09857, 75.065373), (18.028486, 75.209817), (17.865681, 75.289021), (17.679458, 75.331826), (17.565911, 75.408194), (17.432505, 75.514084), (17.282076, 75.584368), (17.183693, 75.600581), (17.075818, 75.625391), (16.982652, 75.657597), (16.896473, 75.709814), (16.794611, 75.735586), (16.603894, 75.833129), (16.321554, 75.920165), (16.044316, 76.067606), (15.896709, 76.164157), (15.608196, 76.227146), (15.443729, 76.291031), (15.305108, 76.318169), (15.23106, 76.364119), (15.066391, 76.352997), (14.984101, 76.365387), (14.886469, 76.399308), (14.756933, 76.443318), (14.551626, 76.432565), (14.372682, 76.371471), (14.249988, 76.423668), (14.101217, 76.527838), (13.945345, 76.626212), (13.818659, 76.780143), (13.678135, 76.917635), (13.496034, 77.012274), (13.320943, 77.138239), (13.236664, 77.238989), (13.122177, 77.367592), (13.023294, 77.475552), (12.864583, 77.511052), (12.865034, 77.643321), (12.794341, 77.720672), (12.746166, 77.814454), (12.689398, 77.855488), (12.683589, 77.859239)]
            },
            {
                "name": "Vellaripatti → Devalapura",
                "polyline": [(9.973636, 78.281783), (9.992111, 78.25611), (10.007152, 78.235119), (10.03728, 78.202572), (10.05689, 78.171553), (10.109261, 78.178853), (10.171932, 78.208361), (10.227664, 78.217369), (10.242457, 78.163829), (10.253661, 78.137526), (10.283926, 78.067037), (10.320428, 78.012449), (10.35788, 77.977065), (10.383918, 77.941653), (10.41536, 77.895188), (10.442109, 77.843535), (10.471018, 77.799222), (10.497822, 77.756025), (10.581311, 77.695911), (10.638456, 77.648329), (10.716936, 77.556868), (10.767036, 77.513709), (10.887161, 77.462909), (10.947985, 77.43473), (11.016155, 77.397787), (11.0693, 77.378506), (11.097835, 77.354289), (11.108679, 77.341777), (11.148168, 77.313681), (11.187864, 77.278465), (11.251052, 77.234271), (11.30711, 77.185531), (11.338724, 77.163209), (11.397883, 77.15337), (11.475745, 77.141756), (11.490925, 77.096679), (11.515369, 77.047044), (11.55394, 76.996146), (11.587953, 76.992568), (11.620924, 77.002066), (11.669374, 76.996704), (11.72751, 77.018217), (11.763302, 77.013763), (11.81726, 76.988754), (11.89858, 76.949712), (11.991084, 76.864873), (12.063764, 76.755834), (12.117804, 76.701997), (12.144307, 76.677846), (12.200345, 76.664819), (12.225722, 76.684569), (12.223062, 76.690357)]
            }
        ]

        total_routes, total_segments = 0, 0

        # First, create routes from realistic data
        for route_data in realistic_routes:
            # Check if already in DB
            existing = Route.objects.filter(name=route_data["name"]).first()
            if existing:
                continue

            geometry = route_data["polyline"]
            # Convert to GeoJSON format (lng, lat)
            geometry_geojson = [[coord[1], coord[0]] for coord in geometry]

            route = Route.objects.create(
                id=uuid.uuid4(),
                name=route_data["name"],
                geometry=json.dumps({"type": "LineString", "coordinates": geometry_geojson}),
            )
            total_routes += 1

            # Split into segments
            step = max(1, len(geometry_geojson) // 5)
            for seq, idx in enumerate(range(0, len(geometry_geojson), step), start=1):
                coords_chunk = geometry_geojson[idx: idx + step + 1]
                if len(coords_chunk) < 2:
                    continue

                RouteSegment.objects.create(
                    id=uuid.uuid4(),
                    route=route,
                    seq=seq,
                    geometry=json.dumps({"type": "LineString", "coordinates": coords_chunk}),
                )
                total_segments += 1

        # Only create realistic routes, no additional ORS API calls

        self.stdout.write(self.style.SUCCESS(f"Created {total_routes} realistic routes with {total_segments} segments from actual logistics data."))
